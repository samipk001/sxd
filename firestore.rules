/**
 * @fileoverview Firestore Security Rules for the school website content management system.
 *
 * Core Philosophy:
 * This ruleset enforces a strict admin-only access model for managing website content
 * (blogs, popup notices, gallery images, and staff profiles). Only authenticated users
 * whose UIDs are present in the `/roles_admin` collection are granted write access.
 * Read access is public for all collections.
 *
 * Data Structure:
 * - `/roles_admin/{uid}`: Collection to store admin UIDs.
 * - `/blogs/{blogId}`: Collection to store blog posts.
 * - `/popup_notices/{noticeId}`: Collection to store popup notices.
 * - `/gallery_images/{imageId}`: Collection to store gallery images.
 * - `/staff_profiles/{profileId}`: Collection to store staff profiles.
 *
 * Key Security Decisions:
 * - Admin-only write access: Only users listed in `/roles_admin` can create, update, or delete content.
 * - Public read access: Any user can read content from the website (blogs, notices, images, profiles).
 * - No user listing: Listing of user documents in `/roles_admin` is forbidden.
 *
 * Denormalization for Authorization:
 * - The presence of a UID in `/roles_admin/{uid}` serves as the authorization token.
 *   This avoids the need for complex queries or joins in the security rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is an admin by verifying their UID exists as a document in the roles_admin collection.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    match /roles_admin/{uid} {
      /**
       * @description Prevents listing of admin UIDs.
       * @path /roles_admin/{uid}
       * @allow (none)
       * @deny Attempting to list documents in this collection.
       * @principle Prevents unauthorized enumeration of admin users.
       */
      allow list: if false;

      /**
       * @description Allows an admin to get their own role document.
       * @path /roles_admin/{uid}
       * @allow (get) User with UID "user_abc" gets their own role document.
       * @deny (get) User with UID "user_xyz" tries to get the role document of "user_abc".
       * @principle Only allows getting a role document for the authenticated user.
       */
      allow get: if isSignedIn() && request.auth.uid == uid;

      /**
       * @description Allows an admin to create their own role document.
       * @path /roles_admin/{uid}
       * @allow (create) User with UID "user_abc" creates their own role document.
       * @deny (create) User with UID "user_xyz" tries to create a role document for "user_abc".
       * @principle Prevents unauthorized role creation.
       */
      allow create: if isSignedIn() && request.auth.uid == uid;

      /**
       * @description Allows an admin to update their own role document.
       * @path /roles_admin/{uid}
       * @allow (update) User with UID "user_abc" updates their own role document.
       * @deny (update) User with UID "user_xyz" tries to update the role document of "user_abc".
       * @principle Prevents unauthorized role updates.
       */
      allow update: if isSignedIn() && request.auth.uid == uid;

      /**
       * @description Allows an admin to delete their own role document.
       * @path /roles_admin/{uid}
       * @allow (delete) User with UID "user_abc" deletes their own role document.
       * @deny (delete) User with UID "user_xyz" tries to delete the role document of "user_abc".
       * @principle Prevents unauthorized role deletion.
       */
      allow delete: if isSignedIn() && request.auth.uid == uid;
    }

    /**
     * @description Manages access to blog posts. Only admins can create, update, or delete blog posts.
     * @path /blogs/{blogId}
     * @allow (get, list) Any user can read blog posts.
     * @allow (create, update, delete) Only admins can modify blog posts.
     * @deny (create, update, delete) Non-admins cannot modify blog posts.
     * @principle Enforces admin-only writes for blog posts.
     */
    match /blogs/{blogId} {
      allow get, list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin() && resource != null;
      allow delete: if isSignedIn() && isAdmin() && resource != null;
    }

    /**
     * @description Manages access to popup notices. Only admins can create, update, or delete notices.
     * @path /popup_notices/{noticeId}
     * @allow (get, list) Any user can read popup notices.
     * @allow (create, update, delete) Only admins can modify popup notices.
     * @deny (create, update, delete) Non-admins cannot modify popup notices.
     * @principle Enforces admin-only writes for popup notices.
     */
    match /popup_notices/{noticeId} {
      allow get, list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin() && resource != null;
      allow delete: if isSignedIn() && isAdmin() && resource != null;
    }

    /**
     * @description Manages access to gallery images. Only admins can create, update, or delete images.
     * @path /gallery_images/{imageId}
     * @allow (get, list) Any user can read gallery images.
     * @allow (create, update, delete) Only admins can modify gallery images.
     * @deny (create, update, delete) Non-admins cannot modify gallery images.
     * @principle Enforces admin-only writes for gallery images.
     */
    match /gallery_images/{imageId} {
      allow get, list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin() && resource != null;
      allow delete: if isSignedIn() && isAdmin() && resource != null;
    }

    /**
     * @description Manages access to staff profiles. Only admins can create, update, or delete profiles.
     * @path /staff_profiles/{profileId}
     * @allow (get, list) Any user can read staff profiles.
     * @allow (create, update, delete) Only admins can modify staff profiles.
     * @deny (create, update, delete) Non-admins cannot modify staff profiles.
     * @principle Enforces admin-only writes for staff profiles.
     */
    match /staff_profiles/{profileId} {
      allow get, list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin() && resource != null;
      allow delete: if isSignedIn() && isAdmin() && resource != null;
    }
  }
}